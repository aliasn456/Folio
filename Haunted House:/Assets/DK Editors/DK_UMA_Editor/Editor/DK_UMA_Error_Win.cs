using UnityEngine;
using UnityEditor;
using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;



public class DK_UMA_Error_Win : EditorWindow {
	#region classes

	#region Define Slot Errors
	#endregion Define Slot Errors

	#region Define Overlay Errors
	#endregion Define Overlay Errors

	#region Legacy Errors
	[System.Serializable]
	public class LegacyNotFoundData
	{
		public DKSlotData Slot;
		public string Message;
	}
	public static List<LegacyNotFoundData> LegacyNotFoundList = new List<LegacyNotFoundData>();

	#endregion Legacy Errors

	#endregion classes

	#region Lists
	#endregion Lists

	#region Variables
	public DK_UMACrowd _DK_UMACrowd;
	
	string SearchString = "";
	SlotLibrary _SlotLibrary;
	OverlayLibrary _OverlayLibrary;
	DKSlotLibrary _DKSlotLibrary;
	DKOverlayLibrary _DKOverlayLibrary;
	
	DKUMA_Variables _DKUMA_Variables;
	GameObject DK_UMA;
	
	
	Vector2 scroll;
	Color Green = new Color (0.8f, 1f, 0.8f, 1);
	Color Red = new Color (0.9f, 0.5f, 0.5f);
	
	bool Helper = false;
	#endregion Variables


	void OnGUI () {
		this.minSize = new Vector2(350, 500);
		
		#region fonts variables
		var bold = new GUIStyle ("label");
		var boldFold = new GUIStyle ("foldout");
		bold.fontStyle = FontStyle.Bold;
		bold.fontSize = 14;
		boldFold.fontStyle = FontStyle.Bold;
		
		var Slim = new GUIStyle ("label");
		Slim.fontStyle = FontStyle.Normal;
		Slim.fontSize = 10;	
		
		var style = new GUIStyle ("label");
		style.wordWrap = true;
		
		#endregion fonts variables

		using (new Horizontal()) {
			GUI.color = Red;
			GUILayout.Label("DK Error Manager", "toolbarbutton", GUILayout.ExpandWidth (true));
			if ( Helper ) GUI.color = Green;
			else GUI.color = Color.yellow;
			if ( GUILayout.Button ( "?", "toolbarbutton", GUILayout.ExpandWidth (false))) {
				if ( Helper ) Helper = false;
				else Helper = true;
			}
		}
		if ( Helper ) GUILayout.TextField("This window displays a list of the errors generated by DK UMA, with information on how to correct your elements to fix it." , 256, style, GUILayout.ExpandWidth (true), GUILayout.ExpandWidth (true));
	
		#region Lists
		GUILayout.Space(5);
		using (new Horizontal()) {
			GUI.color = Color.white ;
			GUILayout.Label("List of Errors", "toolbarbutton", GUILayout.ExpandWidth (true));
		}
		#region Search
		using (new Horizontal()) {
			GUI.color = Color.white;
			GUILayout.Label("Search for :", GUILayout.ExpandWidth (false));
			SearchString = GUILayout.TextField(SearchString, 100, GUILayout.ExpandWidth (true));
			
		}
		#endregion Search

		using (new Horizontal()) {
			using (new ScrollView(ref scroll)) 	{
				#region Legacy Errors List
				using (new Horizontal()) {
					GUI.color = Color.white ;
					GUILayout.Label("Legacy Errors", "toolbarbutton", GUILayout.ExpandWidth (true));
				}
				for (int i = 0; i < LegacyNotFoundList.Count ; i++){
					using (new Horizontal()) {
						GUI.color = Color.yellow ;
						if ( GUILayout.Button( LegacyNotFoundList[i].Message, "toolbarbutton", GUILayout.Width (225))){
							OpenPrepareTab (LegacyNotFoundList[i].Slot);
						}
					}
				}
				#endregion Legacy Errors List
			}
		}
		#endregion Lists
	}

	void OpenPrepareTab(DKSlotData slot){
		GetWindow(typeof(DK_UMA_Editor), false, "DK UMA Editor");
		DK_UMA_Editor.showCreate = false;
		DK_UMA_Editor.ShowPrepare = true;
		DK_UMA_Editor.showModify = false;
		DK_UMA_Editor.showList = false;
		DK_UMA_Editor.showSetup = false;
		DK_UMA_Editor.showPlugIn = false;
		DK_UMA_Editor.showAbout = false;
		DK_UMA_Editor.Step0 = true;
		Selection.activeObject = slot;
	}

	public static void AddError_LegacyNotFound (DKSlotData Slot){
		LegacyNotFoundData Error = new LegacyNotFoundData();
		Error.Slot = Slot;
		Error.Message = ("The legacy of '"+Slot+"' is missing, click here and modify the legacy setting of the '"+Slot+"' slot.");
		LegacyNotFoundList.Add (Error);
	}
	
}
